[
["rapporteren.html", "Hoofdstuk 14 Rapporteren 14.1 De vraagstelling 14.2 De probleemstelling 14.3 Uitvoering AI project 14.4 Reproduceerbare willekeur 14.5 Beduidende cijfers 14.6 Inleiding 14.7 Methodiek 14.8 Resulaten 14.9 Conclusie 14.10 Verwijzen naar extern werk", " Hoofdstuk 14 Rapporteren Hier wordt nog aan gewerkt… Leerdoel 14.1 Rapporteert op correcte wijze de resultaten van een ML analyse (EA_LD763). Rapporteren is een cruciaal onderdeel van een AI project. Het is een vorm van verticale communicatie. Dat betekent dat het meestal gericht is naar iemand die zich hoger in het organigram van de organisatie bevindt.1 Rapporteren kan zowel mondeling als schriftelijk. Als het rapport enig gewicht heeft op latere beslissingen binnen de organisatie, zal het vermoedelijk schriftelijk gebeuren, al is de kans groot dat je het rapport mondeling zult moeten toelichten. vaak is een rapportering verplicht. Maar, een rapport kan natuurlijk ook een uithangbord zijn! Laten we het proces van rapportering stap-voor-stap volgen. 14.1 De vraagstelling Het is goed om een AI te beginnen met een vraag, dit kan een onderzoeksvraag zijn of een business-vraag. Een vraag naar een AI oplossing komt gewoonlijk van een overste of van elders binnen de organisatie. Je kan natuurlijk ook zelf een vraag bedenken. Het allerbelangrijkste is om de vraagstelling expliciet bekend te maken en te laten goedkeuren door alle belanghebbenden. Inderdaad, de meest voorkomende fout binnen AI: iets onderzoeken dat achteraf (gedeeltelijk) irrelevant blijkt te zijn. Hier is een voorbeeld van een onderzoeksvraag: Wat zijn de factoren die de impact van de coronamaatregelen het meeste beïnvloeden? Stelling 14.1 (Een goede vraagstelling) Een goede vraagstelling bevat de volgende elementen: Een vraag en dus altijd met een vraagteken op het einde Een (impliciete) doelstelling die functioneel maar niet technisch van aard is De veronderstelling van ongelimiteerde hulpbronnen (tijd, geld, mensen, data, …) Het laatste puntje van Stelling 14.1 komt er dus op neer dat je nooit kan voldoen aan de vraag (een beetje zoals de doelfunctie \\(f\\)). Het doel is natuurlijk om zo goed als mogelijk aan de vraag te beantwoorden (een beetje als \\(\\hat{f}\\)). 14.2 De probleemstelling De vraagstelling zelf is natuurlijk niet voldoende. Je moet ook door en door begrijpen waarom je iets wil onderzoeken. Dit ‘waarom’ kan je schrijven als een probleemstelling en komt in de inleiding van je rapport. Je denkt misschien dat de lezer van je rapport goed weet waarom het onderzoek wordt uitgevoerd, en dat is inderdaad meestal zo. Alleen hebben vaak verschillende belanghebbenden daar toch een andere mening over. De motivatie voor het onderzoek kan een belangrijke impact hebben op de werkwijze van een AI project, dus is het goed dat er een consensus bestaat over de probleemstelling alvorens het eigenlijke werk wordt aangevat. 14.3 Uitvoering AI project De rest van het rapport Nadat de vraagstelling duidelijk is geworden kan men beginnen met het project uit te voeren. De vorige hoofdstukken in deze cursus handelden voornamelijk over hoe je neurale netwerken kunt gebruiken om een antwoord te bieden op de oorspronkelijke vraag. De output van het AI project ziet er altijd als volgt uit: Een gepubliceerd model dat in staat is om voorspellingen te doen De performantie van het gepubliceerd model Informatie over de trainingsfase van het model Het is deze output die als invoer dient voor het rapport. 14.4 Reproduceerbare willekeur Tijdens je onderzoeksfase moet je zorgen voor het gebruik van seeds telkens wanneer er (pseudo-)willekeurige getallen worden gegenereerd. Een seed is meestal een natuurlijk getal dat door de onderzoek zelf gekozen wordt en dat aangeeft waar in de lijst van pseudo-willekeurige getallen de afnamen ervan begint. Een bepaalde seed zorgt er steeds voor dat dezelfde reeks van willekeurige getallen wordt gegenereerd, Dit is belangrijk voor het verzekeren van de reproduceerbaarheid van het onderzoek (later in dit hoofdstuk meer hierover). In R doe je dit zo: set.seed(42) runif(10) ## [1] 0.9148060 0.9370754 0.2861395 0.8304476 0.6417455 0.5190959 0.7365883 ## [8] 0.1346666 0.6569923 0.7050648 In Python gebeurt dit zo: import random import numpy as np np.random.seed(42) np.random.rand(10) ## array([0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864, ## 0.15599452, 0.05808361, 0.86617615, 0.60111501, 0.70807258]) Beide talen gebruiken standaard het zogenaamde Mersenne Twister algoritme. Toch valt het op dat de getallen verschillend zijn. Als dat een probleem is, kan je vanuit Python dezelfde c code aanroepen waar R van gebruik maakt, of nog gemakkelijker, laat R de getallen generen en importeer ze in Python. Nog een alternatief om in meerdere talen dezelfde getallen te genereren is het gebruiken van externe websites zoals https://www.random.org/integers/ waar je door middel van een eenvoudige oproep de getallen kunt bekomen: scan(paste0( &quot;http://www.random.org/decimal-fractions/?&quot;, &quot;num=10&amp;dec=7&amp;col=1&quot;, &quot;&amp;format=plain&amp;rnd=id.xyz&quot;)) ## [1] 0.9647914 0.3004568 0.1749213 0.1645292 0.2127342 0.1077416 0.1755337 ## [8] 0.2509933 0.8611974 0.9328541 Nerd alert 14.1 (Diggin’ deeper) In RStudio kan je de c-code van interne functies achterhalen. Laten we de functie set.seed als voorbeeld nemen. Geef de naam van deze functie, zonder haakjes, in in de console. Je ziet dan de inhoud van de functie. Sommige functies zijn verborgen en dan moet je de namespace opgeven (base::set.seed of zelfs base:::set.seed). Op de laatste lijn code zie dat een interne C functie wordt aangeroepen: .Internal(set.seed(seed, i.knd, normal.kind, sample.kind)) Je kan uitzoeken waar de oorspronkelijke C code zich bevindt door de opdracht: pryr::show_c_source(.Internal(set.seed(seed, i.knd, normal.kind, sample.kind))) in te voeren. In de src/main subfolder van de broncode van R, vind je dan het bestand RNG.c waarbinnen de methode do_setseed (SEXP call, SEXP op, SEXP args, SEXP env) staat. In R, zoals dat vaker gaat, heb je veel meer mogelijkheden dan in Python. Geef ?set.seed op voor meer info. 14.5 Beduidende cijfers Tijdens het onderzoek kom je allerhande getallen tegen en het is toch niet slecht om even te blijven stilstaan bij de cijfers (eng: digits) die deze getallen (eng: numbers) opmaken. Significante of beduidende cijfers (eng. significant figures) zijn die cijfers van een getal die informatie overdragen. bijvoorbeeld, bij het getal 12.345 veronderstel je (zonder verdere context) dat het 5 beduidende cijfers heeft. Vertelt iemand je dat de Eiffeltoren 324.00248975 m hoog is, dan weet je natuurlijk dat niet elk cijfer hiervan significant kan zijn, alleen al omdat door de thermale expansie de hoogte van de Eiffeltoren in de winter en de zomer meer dan 10 centimeter kan verschillen. Het is natuurlijk misleidend om niet-beduidende cijfers te rapporteren. De Eiffeltoren is dus 324 m hoog, zonder meer. Het exacte aantal beduidende cijfers kan je statistisch bepalen als je een over een toepasselijke steekproef van de meting beschikt en de tussenstappen van de berekeningen kent (cfr. foutenpropagatie), maar zou ons hier te ver leiden en een echte vuistregel is er niet. Het is een kwestie om het onderscheidend vermogen in te schatten van de grootheid in kwestie en daar rekening mee te houden. Bijvoorbeeld, een model geeft de voorspelling van een gemiddelde reistijd van 56.25 minuten. Wat moet je rapporteren? Wel, op een halve minuut steekt het niet, dus 56.2 minuten is zeker voldoende. Nerd alert 14.2 Wacht eens? Moet je dit getal niet afronden naar 56.3 in plaats van afkappen tot 56.2? Het antwoord is ja en neen. Ja, je moet hier afronden, niet afkappen. Neen, round(56.25, 1) = 56.2, niet 56.3! Lees hier meer over door ?round in te geven. 14.6 Inleiding Nadat de probleemstelling en de vraagstelling aan bod zijn gekomen en nadat het project is uitgevoerd, kan je aan de inleiding schrijven. Stelling 14.2 (Inhoud inleiding) Een goede inleiding bevat de volgende elementen: Probleemstelling Vraagstelling Bondige omschrijving van de methodiek De probleemstelling en de vraagstelling moeten ongewijzigd worden overgenomen zoals ze werden gedefinieerd vóór dat het onderzoek begon. Het enige wat je nu kunt toevoegen is de methodiek. Het gaat hier over een bondige samenvatting waarin je vermeldt welke technologie je hebt gebruikt. Dus, net als bij een software architectuur, benoem je enkel de technieken zonder in technische details te vervallen. Laten we een een voorbeeld nemen, in dit geval een wetenschappelijk artikel in Nature2 over het gebruik van een CNN om COVID-19 infectie in röntgenopnames te detecteren (Wang et al. (2020)). Opgelet, het gaat hier om een wetenschappelijk artikel en dat is niet helemaal hetzelfde als een technisch rapport, maar in principe hebben beide ongeveer dezelfde opbouw. Figuur 14.1: Overzicht van de onderdelen van een titel van Wang et al. (2020) zoals uitgebracht door Nature. Figuur 14.2: Uitlichten van de structuur van een inleiding van Wang et al. (2020). 14.7 Methodiek In een wetenschappelijk artikel spreekt men in het algemeen van Materialen en methoden (eng: Materials and methods). De bedoeling is om binnen dit onderdeel een nauwkeurige beschrijving te geven van alle hardware en software componenten die gebruikt werden alsook de modus operandi van het onderzoek. Een belangrijke doelstelling van Materialen en methoden is om ervoor te zorgen dat jouw analyses reproduceerbaar zijn. Dit houdt in dat elke andere datawetenschapper in staat moet zijn om, vertrekkende van de zelfde data, tot hetzelfde resultaat te komen. Stelling 14.3 (Voorwaarden voor reproduceerbaarheid) Om het onderzoek reproduceerbaar te maken, moet er aan de volgende criteria voldaan worden: (tijdens onderzoek) Gebruik van een random seed (zie boven) Het moet duidelijk zijn welke hardware er gebruikt is tijdens de verschillende fasen van het onderzoek (pre-processing, trainen, testen, …) De data moet beschikbaar zijn of op zijn minst beschikbaar kunnen worden gemaakt Je geeft mee op welke subset van de data er gewerkt is Je geeft een volledig beeld van de data-flow, geschreven en/of met behulp van illustraties Ben je niet zeker of je werk reproduceerbaar is? Kijk dan deze checklist na: Is de data beschikbaar? Staat jouw rapport onder versie-controle en heb je de link naar de repository gedeeld? Ben je geen software vergeten vermelden waar je onderzoek van afhangt? Een tekstverwerker of IDE zoals VSCode moet je in principe niet vermelden, maar de versie van R, Python, TensorFlow, … bijvoorbeeld wél. Staan er in de code nog verwijzingen naar folders/API’s of andere hulpbronnen die zouden kunnen ‘breken’? Is er voor elke externe hulpbron een volledige beschrijving + referentie beschikbaar zodat de gebruikers deze kunnen opzoeken mocht er toch een link kunnen breken? Heeft de gemiddelde datawetenschapper voldoende aan jouw beschrijving om te begrepen wat je hebt gedaan en ook waarom je het hebt gedaan? Kan elke data-element of variabele gevolgd worden van bron tot model? Ben je nog steeds niet zeker? Test het dan gewoon uit. Geef het rapport (zonder tussen resultaat) met de data aan een persoon skilled in the art (nl: deskundige persoon) en vraag deze persoon om het geheel van scratch opnieuw uit te voeren. in de praktijk betekent dit dus typisch een archiefbestand met daarin de data en een rapport (*.Rmd-bestand) zonder enige tussen resultaten zoals bijvoorbeeld de resultaten van eerdere trainingen. 14.7.1 Data beschikbaar maken Als je data verspreidt, probeer dan ervoor te zorgen dat je een formaat kiest dat robuust is en door iedereen geopend kan wordt ongeacht de achtergrond van de datawetenschapper en ongeacht het besturingssysteem. Bijvoorbeeld, gebruik een *.tsv-bestand (tab-separated values). Dit is vele male handiger dan de spijtig genoeg meer populaire *.cvs-bestanden (comma-separated vales) omdat hierbij met escapes gewerkt dient te worden indien de data zelf een komma bevat (escapes voor de komma is de dubbele quote, die op zijn beurt ook ge-escaped moet kunnen worden). Komma’s komen namelijk standaard voor in allerhande teksten zoals adressen, tweets, … terwijl het tabulatie-teken dit probleem niet heeft. 14.7.2 Beschikbaar maken van databanken Gaat het om een volledige databank, dan kan uiteraard best de link meegegeven worden of een dump-bestand worden aangemaakt (bijvoorbeeld SQL *.bak-bestand). Zorg altijd dat het duidelijk is voor de ontvanger hoe er connectie met de databank gemaakt kan worden en om welk type databank het gaat (Oracle, MySQL, MSSQL, PostgreSQL, MongoDB, SAS, …) en vermeld de versie waar relevant. Probeer ervoor te zorgen dat de oorspronkelijke en/of huidige auteurs van de databank een eervolle vermelding krijgen. Probeer ook ervoor te zorgen dat de betekenis van elke variabele duidelijk is. Geef de gebruiker de kans om zelf data te kunnen exploreren. 14.7.3 Procesbeschrijving Naast het aspect van reproduceerbaarheid moet de beschrijving van de methodiek er ook voor zorgen dat er bij het doelpubliek een goed begrip ontstaat van van de motivatie bij de verscheidene stappen binnen de analyse. Met andere woorden, probeer duidelijk te maken waarom je hebt gedaan wat je hebt gedaan. Eén aspect hiervan is het duidelijk maken waar elke variabele voor gediend heeft in een soort data-flow. Dat kan héél eenvoudig zijn voor kleine projecten, maar kan in grotere projecten veel complexer worden en eventueel als addendum toegevoegd aan het verslag. Hoe complex een DFD moet zijn hangt af van wie er wat mee moet doen. Figuur 14.3: DFD diagram zoals gedemonstreerd door Visual Paradigm (bron). Figuur 14.4: Voorbeeld van een DFD binnen de wereld van BI. 14.8 Resulaten 14.9 Conclusie 14.10 Verwijzen naar extern werk Bronvermelding "]
]
